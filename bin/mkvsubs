#!/usr/bin/env bash
set -euo pipefail

# Check dependencies using 'which'
if ! which mkvmerge >/dev/null 2>&1; then
    echo "Error: mkvmerge not found. Please install mkvtoolnix."
    exit 1
fi
if ! which mkvextract >/dev/null 2>&1; then
    echo "Error: mkvextract not found. Please install mkvtoolnix."
    exit 1
fi
if ! which jq >/dev/null 2>&1; then
    echo "Error: jq not found. Please install jq."
    exit 1
fi

default_selection=""
shopt -s nullglob

for file in *.mkv; do
    echo "----------------------------------------------------"
    echo "File: $file"
    echo "----------------------------------------------------"

    # Get subtitle track info as JSON
    mapfile -t subs < <(mkvmerge -J "$file" | jq -c '.tracks[] | select(.type=="subtitles")')
    if [ ${#subs[@]} -eq 0 ]; then
        echo "No subtitles found in $file"
        continue
    fi

    echo "Available subtitle tracks:"
    declare -A track_map=()
    for sub in "${subs[@]}"; do
        id=$(echo "$sub" | jq -r '.id')
        lang=$(echo "$sub" | jq -r '.properties.language // "und"')
        codec=$(echo "$sub" | jq -r '.properties.codec_id')
        name=$(echo "$sub" | jq -r '.properties.track_name // empty')
        track_map["$id"]="$sub"

        if [[ -n "$name" && "$name" != "null" ]]; then
            echo "  [$id] ${lang} — ${codec} — \"$name\""
        else
            echo "  [$id] ${lang} — ${codec}"
        fi
    done

    if [[ -n "$default_selection" ]]; then
        echo
        echo "Using default selection: Track ID $default_selection"
        id="$default_selection"
    else
        echo
        read -p "Enter the Track ID to extract (or press Enter to skip, or type 'dN' to set N as default): " choice

        if [[ -z "$choice" ]]; then
            echo "Skipping $file"
            continue
        fi

        if [[ "$choice" =~ ^d([0-9]+)$ ]]; then
            id="${BASH_REMATCH[1]}"
            default_selection="$id"
            echo "Default selection set to Track ID $default_selection"
        else
            id="$choice"
        fi
    fi

    # Validate Track ID
    if [[ -z "${track_map[$id]+found}" ]]; then
        echo "Invalid Track ID: $id. Skipping $file."
        continue
    fi

    track_json="${track_map[$id]}"
    lang=$(echo "$track_json" | jq -r '.properties.language // "und"')

    base="${file%.*}"
    out="${base}.${lang}.srt"

    echo "Extracting subtitle track $id ($lang) → $out"
    mkvextract tracks "$file" "$id:$out"

    echo "Done."
    echo
done

echo "All done!"
